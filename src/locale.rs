use std::error::Error;
use std::fmt;

#[derive(Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Language {
    //----BEGIN LANGUAGE ENUM----
    Aa,
    Ab,
    Ace,
    Ach,
    Ada,
    Ady,
    Ae,
    Aeb,
    Af,
    Afh,
    Agq,
    Ain,
    Ak,
    Akk,
    Akz,
    Ale,
    Aln,
    Alt,
    Am,
    An,
    Ang,
    Anp,
    Ar,
    Arc,
    Arn,
    Aro,
    Arp,
    Arq,
    Ars,
    Arw,
    Ary,
    Arz,
    As,
    Asa,
    Ase,
    Ast,
    Av,
    Avk,
    Awa,
    Ay,
    Az,
    Ba,
    Bal,
    Ban,
    Bar,
    Bas,
    Bax,
    Bbc,
    Bbj,
    Be,
    Bej,
    Bem,
    Bew,
    Bez,
    Bfd,
    Bfq,
    Bg,
    Bgn,
    Bho,
    Bi,
    Bik,
    Bin,
    Bjn,
    Bkm,
    Bla,
    Bm,
    Bn,
    Bo,
    Bpy,
    Bqi,
    Br,
    Bra,
    Brh,
    Brx,
    Bs,
    Bss,
    Bua,
    Bug,
    Bum,
    Byn,
    Byv,
    Ca,
    Cad,
    Car,
    Cay,
    Cch,
    Ccp,
    Ce,
    Ceb,
    Cgg,
    Ch,
    Chb,
    Chg,
    Chk,
    Chm,
    Chn,
    Cho,
    Chp,
    Chr,
    Chy,
    Cic,
    Ckb,
    Co,
    Cop,
    Cps,
    Cr,
    Crh,
    Crs,
    Cs,
    Csb,
    Cu,
    Cv,
    Cy,
    Da,
    Dak,
    Dar,
    Dav,
    De,
    Del,
    Den,
    Dgr,
    Din,
    Dje,
    Doi,
    Dsb,
    Dtp,
    Dua,
    Dum,
    Dv,
    Dyo,
    Dyu,
    Dz,
    Dzg,
    Ebu,
    Ee,
    Efi,
    Egl,
    Egy,
    Eka,
    El,
    Elx,
    En,
    Enm,
    Eo,
    Es,
    Esu,
    Et,
    Eu,
    Ewo,
    Ext,
    Fa,
    Fan,
    Fat,
    Ff,
    Fi,
    Fil,
    Fit,
    Fj,
    Fo,
    Fon,
    Fr,
    Frc,
    Frm,
    Fro,
    Frp,
    Frr,
    Frs,
    Fur,
    Fy,
    Ga,
    Gaa,
    Gag,
    Gan,
    Gay,
    Gba,
    Gbz,
    Gd,
    Gez,
    Gil,
    Gl,
    Glk,
    Gmh,
    Gn,
    Goh,
    Gom,
    Gon,
    Gor,
    Got,
    Grb,
    Grc,
    Gsw,
    Gu,
    Guc,
    Gur,
    Guz,
    Gv,
    Gwi,
    Ha,
    Hai,
    Hak,
    Haw,
    He,
    Hi,
    Hif,
    Hil,
    Hit,
    Hmn,
    Ho,
    Hr,
    Hsb,
    Hsn,
    Ht,
    Hu,
    Hup,
    Hy,
    Hz,
    Ia,
    Iba,
    Ibb,
    Id,
    Ie,
    Ig,
    Ii,
    Ik,
    Ilo,
    Inh,
    Io,
    Is,
    It,
    Iu,
    Izh,
    Ja,
    Jam,
    Jbo,
    Jgo,
    Jmc,
    Jpr,
    Jrb,
    Jut,
    Jv,
    Ka,
    Kaa,
    Kab,
    Kac,
    Kaj,
    Kam,
    Kaw,
    Kbd,
    Kbl,
    Kcg,
    Kde,
    Kea,
    Ken,
    Kfo,
    Kg,
    Kgp,
    Kha,
    Kho,
    Khq,
    Khw,
    Ki,
    Kiu,
    Kj,
    Kk,
    Kkj,
    Kl,
    Kln,
    Km,
    Kmb,
    Kn,
    Ko,
    Koi,
    Kok,
    Kos,
    Kpe,
    Kr,
    Krc,
    Kri,
    Krj,
    Krl,
    Kru,
    Ks,
    Ksb,
    Ksf,
    Ksh,
    Ku,
    Kum,
    Kut,
    Kv,
    Kw,
    Ky,
    La,
    Lad,
    Lag,
    Lah,
    Lam,
    Lb,
    Lez,
    Lfn,
    Lg,
    Li,
    Lij,
    Liv,
    Lkt,
    Lmo,
    Ln,
    Lo,
    Lol,
    Lou,
    Loz,
    Lrc,
    Lt,
    Ltg,
    Lu,
    Lua,
    Lui,
    Lun,
    Luo,
    Lus,
    Luy,
    Lv,
    Lzh,
    Lzz,
    Mad,
    Maf,
    Mag,
    Mai,
    Mak,
    Man,
    Mas,
    Mde,
    Mdf,
    Mdr,
    Men,
    Mer,
    Mfe,
    Mg,
    Mga,
    Mgh,
    Mgo,
    Mh,
    Mi,
    Mic,
    Min,
    Mk,
    Ml,
    Mn,
    Mnc,
    Mni,
    Moh,
    Mos,
    Mr,
    Mrj,
    Ms,
    Mt,
    Mua,
    Mul,
    Mus,
    Mwl,
    Mwr,
    Mwv,
    My,
    Mye,
    Myv,
    Mzn,
    Na,
    Nan,
    Nap,
    Naq,
    Nb,
    Nd,
    Nds,
    Ne,
    New,
    Ng,
    Nia,
    Niu,
    Njo,
    Nl,
    Nmg,
    Nn,
    Nnh,
    No,
    Nog,
    Non,
    Nov,
    Nqo,
    Nr,
    Nso,
    Nus,
    Nv,
    Nwc,
    Ny,
    Nym,
    Nyn,
    Nyo,
    Nzi,
    Oc,
    Oj,
    Om,
    Or,
    Os,
    Osa,
    Ota,
    Pa,
    Pag,
    Pal,
    Pam,
    Pap,
    Pau,
    Pcd,
    Pcm,
    Pdc,
    Pdt,
    Peo,
    Pfl,
    Phn,
    Pi,
    Pl,
    Pms,
    Pnt,
    Pon,
    Prg,
    Pro,
    Ps,
    Pt,
    Qu,
    Quc,
    Qug,
    Raj,
    Rap,
    Rar,
    Rgn,
    Rif,
    Rm,
    Rn,
    Ro,
    Rof,
    Rom,
    Rtm,
    Ru,
    Rue,
    Rug,
    Rup,
    Rw,
    Rwk,
    Sa,
    Sad,
    Sah,
    Sam,
    Saq,
    Sas,
    Sat,
    Saz,
    Sba,
    Sbp,
    Sc,
    Scn,
    Sco,
    Sd,
    Sdc,
    Sdh,
    Se,
    See,
    Seh,
    Sei,
    Sel,
    Ses,
    Sg,
    Sga,
    Sgs,
    Sh,
    Shi,
    Shn,
    Shu,
    Si,
    Sid,
    Sk,
    Sl,
    Sli,
    Sly,
    Sm,
    Sma,
    Smj,
    Smn,
    Sms,
    Sn,
    Snk,
    So,
    Sog,
    Sq,
    Sr,
    Srn,
    Srr,
    Ss,
    Ssy,
    St,
    Stq,
    Su,
    Suk,
    Sus,
    Sux,
    Sv,
    Sw,
    Swb,
    Syc,
    Syr,
    Szl,
    Ta,
    Tcy,
    Te,
    Tem,
    Teo,
    Ter,
    Tet,
    Tg,
    Th,
    Ti,
    Tig,
    Tiv,
    Tk,
    Tkl,
    Tkr,
    Tl,
    Tlh,
    Tli,
    Tly,
    Tmh,
    Tn,
    To,
    Tog,
    Tpi,
    Tr,
    Tru,
    Trv,
    Ts,
    Tsd,
    Tsi,
    Tt,
    Ttt,
    Tum,
    Tvl,
    Tw,
    Twq,
    Ty,
    Tyv,
    Tzm,
    Udm,
    Ug,
    Uga,
    Uk,
    Umb,
    Und,
    Ur,
    Uz,
    Vai,
    Ve,
    Vec,
    Vep,
    Vi,
    Vls,
    Vmf,
    Vo,
    Vot,
    Vro,
    Vun,
    Wa,
    Wae,
    Wal,
    War,
    Was,
    Wbp,
    Wo,
    Wuu,
    Xal,
    Xh,
    Xmf,
    Xog,
    Yao,
    Yap,
    Yav,
    Ybb,
    Yi,
    Yo,
    Yrl,
    Yue,
    Za,
    Zap,
    Zbl,
    Zea,
    Zen,
    Zgh,
    Zh,
    Zu,
    Zun,
    Zxx,
    Zza,
    //----END LANGUAGE ENUM----
}

impl fmt::Display for Language {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let src = format!("{:?}", self);
        write!(f, "{}", src.to_lowercase())
    }
}

#[derive(Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Territory {
    Code001,
    Us,
    Uk,
    Jp,
    Kp,
    Kr,
}

impl fmt::Display for Territory {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let mut src = format!("{:?}", self);
        if src.starts_with("Code") {
            src = src.replace("Code", "");
        }
        write!(f, "{}", src.to_uppercase())
    }
}

#[derive(Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Locale {
    //----BEGIN LOCALE ENUM----
    EnUs,
    EnUk,
    JaJp,
    KoKp,
    KoKr,
    //----END LOCALE ENUM----
}

#[derive(Debug)]
pub struct NoLocaleError {
    locale: String,
}

impl Error for NoLocaleError {
    fn description(&self) -> &str {
        "No such locale."
    }
}

impl fmt::Display for NoLocaleError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "No such locale: {}", self.locale)
    }
}

impl Locale {
    pub fn new(string: &str) -> Result<Locale, NoLocaleError> {
        let string = string.replace("-", "_");
        match string.as_str() {
            //----BEGIN LOCALE NEW----
            "en_US" => Ok(Locale::EnUs),
            "en_UK" => Ok(Locale::EnUk),
            "ja_JP" => Ok(Locale::JaJp),
            "ko_KP" => Ok(Locale::KoKp),
            "ko_KR" => Ok(Locale::KoKr),
            //----END LOCALE NEW----
            _ => {
                Err(NoLocaleError {
                    locale: string.to_string(),
                })
            }
        }
    }

    pub fn language(&self) -> &str {
        match self {
            //----BEGIN LOCALE LANGUAGE----
            Locale::EnUs => "en",
            Locale::EnUk => "en",
            Locale::JaJp => "ja",
            Locale::KoKp => "ko",
            Locale::KoKr => "ko",
            //----END LOCALE LANGUAGE----
        }
    }

    pub fn territory(&self) -> &str {
        match self {
            //----BEGIN LOCALE TERRITORY----
            Locale::EnUs => "US",
            Locale::EnUk => "UK",
            Locale::JaJp => "JP",
            Locale::KoKp => "KP",
            Locale::KoKr => "KR",
            //----END LOCALE TERRITORY----
        }
    }
}
